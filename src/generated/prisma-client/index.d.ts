// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  skills: (where?: SkillsWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  skills: (where: SkillsWhereUniqueInput) => SkillsNullablePromise;
  skillses: (args?: {
    where?: SkillsWhereInput;
    orderBy?: SkillsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Skills>;
  skillsesConnection: (args?: {
    where?: SkillsWhereInput;
    orderBy?: SkillsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SkillsConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createSkills: (data: SkillsCreateInput) => SkillsPromise;
  updateSkills: (args: {
    data: SkillsUpdateInput;
    where: SkillsWhereUniqueInput;
  }) => SkillsPromise;
  updateManySkillses: (args: {
    data: SkillsUpdateManyMutationInput;
    where?: SkillsWhereInput;
  }) => BatchPayloadPromise;
  upsertSkills: (args: {
    where: SkillsWhereUniqueInput;
    create: SkillsCreateInput;
    update: SkillsUpdateInput;
  }) => SkillsPromise;
  deleteSkills: (where: SkillsWhereUniqueInput) => SkillsPromise;
  deleteManySkillses: (where?: SkillsWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  skills: (
    where?: SkillsSubscriptionWhereInput
  ) => SkillsSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SkillsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "skill_ASC"
  | "skill_DESC"
  | "description_ASC"
  | "description_DESC"
  | "years_experience_ASC"
  | "years_experience_DESC"
  | "hourly_rate_ASC"
  | "hourly_rate_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "reviewer_name_ASC"
  | "reviewer_name_DESC"
  | "reviewer_id_ASC"
  | "reviewer_id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "user_type_ASC"
  | "user_type_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "facebook_id_ASC"
  | "facebook_id_DESC"
  | "google_id_ASC"
  | "google_id_DESC"
  | "earnings_ASC"
  | "earnings_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpsertWithoutSkillsInput {
  update: UserUpdateWithoutSkillsDataInput;
  create: UserCreateWithoutSkillsInput;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SkillsCreateOneWithoutReviewsInput {
  create?: Maybe<SkillsCreateWithoutReviewsInput>;
  connect?: Maybe<SkillsWhereUniqueInput>;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  reviewer_name?: Maybe<String>;
  reviewer_name_not?: Maybe<String>;
  reviewer_name_in?: Maybe<String[] | String>;
  reviewer_name_not_in?: Maybe<String[] | String>;
  reviewer_name_lt?: Maybe<String>;
  reviewer_name_lte?: Maybe<String>;
  reviewer_name_gt?: Maybe<String>;
  reviewer_name_gte?: Maybe<String>;
  reviewer_name_contains?: Maybe<String>;
  reviewer_name_not_contains?: Maybe<String>;
  reviewer_name_starts_with?: Maybe<String>;
  reviewer_name_not_starts_with?: Maybe<String>;
  reviewer_name_ends_with?: Maybe<String>;
  reviewer_name_not_ends_with?: Maybe<String>;
  reviewer_id?: Maybe<Float>;
  reviewer_id_not?: Maybe<Float>;
  reviewer_id_in?: Maybe<Float[] | Float>;
  reviewer_id_not_in?: Maybe<Float[] | Float>;
  reviewer_id_lt?: Maybe<Float>;
  reviewer_id_lte?: Maybe<Float>;
  reviewer_id_gt?: Maybe<Float>;
  reviewer_id_gte?: Maybe<Float>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface SkillsCreateWithoutReviewsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutSkillsInput;
  skill: String;
  description: String;
  years_experience: Float;
  hourly_rate: Float;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  user_type?: Maybe<String>;
  user_type_not?: Maybe<String>;
  user_type_in?: Maybe<String[] | String>;
  user_type_not_in?: Maybe<String[] | String>;
  user_type_lt?: Maybe<String>;
  user_type_lte?: Maybe<String>;
  user_type_gt?: Maybe<String>;
  user_type_gte?: Maybe<String>;
  user_type_contains?: Maybe<String>;
  user_type_not_contains?: Maybe<String>;
  user_type_starts_with?: Maybe<String>;
  user_type_not_starts_with?: Maybe<String>;
  user_type_ends_with?: Maybe<String>;
  user_type_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  facebook_id?: Maybe<Float>;
  facebook_id_not?: Maybe<Float>;
  facebook_id_in?: Maybe<Float[] | Float>;
  facebook_id_not_in?: Maybe<Float[] | Float>;
  facebook_id_lt?: Maybe<Float>;
  facebook_id_lte?: Maybe<Float>;
  facebook_id_gt?: Maybe<Float>;
  facebook_id_gte?: Maybe<Float>;
  google_id?: Maybe<Float>;
  google_id_not?: Maybe<Float>;
  google_id_in?: Maybe<Float[] | Float>;
  google_id_not_in?: Maybe<Float[] | Float>;
  google_id_lt?: Maybe<Float>;
  google_id_lte?: Maybe<Float>;
  google_id_gt?: Maybe<Float>;
  google_id_gte?: Maybe<Float>;
  earnings?: Maybe<Float>;
  earnings_not?: Maybe<Float>;
  earnings_in?: Maybe<Float[] | Float>;
  earnings_not_in?: Maybe<Float[] | Float>;
  earnings_lt?: Maybe<Float>;
  earnings_lte?: Maybe<Float>;
  earnings_gt?: Maybe<Float>;
  earnings_gte?: Maybe<Float>;
  skills_every?: Maybe<SkillsWhereInput>;
  skills_some?: Maybe<SkillsWhereInput>;
  skills_none?: Maybe<SkillsWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateOneWithoutSkillsInput {
  create?: Maybe<UserCreateWithoutSkillsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateWithoutSkillsInput {
  id?: Maybe<ID_Input>;
  email: String;
  first_name: String;
  last_name: String;
  user_type: String;
  latitude: Float;
  longitude: Float;
  facebook_id: Float;
  google_id: Float;
  earnings: Float;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface ReviewUpdateInput {
  skills_id?: Maybe<SkillsUpdateOneRequiredWithoutReviewsInput>;
  reviewer_name?: Maybe<String>;
  reviewer_id?: Maybe<Float>;
  rating?: Maybe<Float>;
}

export interface SkillsUpdateManyDataInput {
  skill?: Maybe<String>;
  description?: Maybe<String>;
  years_experience?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
}

export interface SkillsUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<SkillsCreateWithoutReviewsInput>;
  update?: Maybe<SkillsUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<SkillsUpsertWithoutReviewsInput>;
  connect?: Maybe<SkillsWhereUniqueInput>;
}

export interface SkillsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  skill?: Maybe<String>;
  skill_not?: Maybe<String>;
  skill_in?: Maybe<String[] | String>;
  skill_not_in?: Maybe<String[] | String>;
  skill_lt?: Maybe<String>;
  skill_lte?: Maybe<String>;
  skill_gt?: Maybe<String>;
  skill_gte?: Maybe<String>;
  skill_contains?: Maybe<String>;
  skill_not_contains?: Maybe<String>;
  skill_starts_with?: Maybe<String>;
  skill_not_starts_with?: Maybe<String>;
  skill_ends_with?: Maybe<String>;
  skill_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  years_experience?: Maybe<Float>;
  years_experience_not?: Maybe<Float>;
  years_experience_in?: Maybe<Float[] | Float>;
  years_experience_not_in?: Maybe<Float[] | Float>;
  years_experience_lt?: Maybe<Float>;
  years_experience_lte?: Maybe<Float>;
  years_experience_gt?: Maybe<Float>;
  years_experience_gte?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
  hourly_rate_not?: Maybe<Float>;
  hourly_rate_in?: Maybe<Float[] | Float>;
  hourly_rate_not_in?: Maybe<Float[] | Float>;
  hourly_rate_lt?: Maybe<Float>;
  hourly_rate_lte?: Maybe<Float>;
  hourly_rate_gt?: Maybe<Float>;
  hourly_rate_gte?: Maybe<Float>;
  AND?: Maybe<SkillsScalarWhereInput[] | SkillsScalarWhereInput>;
  OR?: Maybe<SkillsScalarWhereInput[] | SkillsScalarWhereInput>;
  NOT?: Maybe<SkillsScalarWhereInput[] | SkillsScalarWhereInput>;
}

export interface SkillsUpdateWithoutReviewsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutSkillsInput>;
  skill?: Maybe<String>;
  description?: Maybe<String>;
  years_experience?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
}

export type SkillsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutSkillsInput {
  create?: Maybe<UserCreateWithoutSkillsInput>;
  update?: Maybe<UserUpdateWithoutSkillsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSkillsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SkillsUpdateWithWhereUniqueWithoutUserInput {
  where: SkillsWhereUniqueInput;
  data: SkillsUpdateWithoutUserDataInput;
}

export interface UserUpdateWithoutSkillsDataInput {
  email?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  user_type?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  facebook_id?: Maybe<Float>;
  google_id?: Maybe<Float>;
  earnings?: Maybe<Float>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface SkillsUpdateManyMutationInput {
  skill?: Maybe<String>;
  description?: Maybe<String>;
  years_experience?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
}

export interface SkillsCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  skill: String;
  description: String;
  years_experience: Float;
  hourly_rate: Float;
  reviews?: Maybe<ReviewCreateManyWithoutSkills_idInput>;
}

export interface SkillsUpsertWithoutReviewsInput {
  update: SkillsUpdateWithoutReviewsDataInput;
  create: SkillsCreateWithoutReviewsInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  first_name: String;
  last_name: String;
  user_type: String;
  latitude: Float;
  longitude: Float;
  facebook_id: Float;
  google_id: Float;
  earnings: Float;
  skills?: Maybe<SkillsCreateManyWithoutUserInput>;
}

export interface ReviewUpdateManyMutationInput {
  reviewer_name?: Maybe<String>;
  reviewer_id?: Maybe<Float>;
  rating?: Maybe<Float>;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  skills_id: SkillsCreateOneWithoutReviewsInput;
  reviewer_name: String;
  reviewer_id: Float;
  rating: Float;
}

export interface ReviewUpdateManyDataInput {
  reviewer_name?: Maybe<String>;
  reviewer_id?: Maybe<Float>;
  rating?: Maybe<Float>;
}

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  skills_id?: Maybe<SkillsWhereInput>;
  reviewer_name?: Maybe<String>;
  reviewer_name_not?: Maybe<String>;
  reviewer_name_in?: Maybe<String[] | String>;
  reviewer_name_not_in?: Maybe<String[] | String>;
  reviewer_name_lt?: Maybe<String>;
  reviewer_name_lte?: Maybe<String>;
  reviewer_name_gt?: Maybe<String>;
  reviewer_name_gte?: Maybe<String>;
  reviewer_name_contains?: Maybe<String>;
  reviewer_name_not_contains?: Maybe<String>;
  reviewer_name_starts_with?: Maybe<String>;
  reviewer_name_not_starts_with?: Maybe<String>;
  reviewer_name_ends_with?: Maybe<String>;
  reviewer_name_not_ends_with?: Maybe<String>;
  reviewer_id?: Maybe<Float>;
  reviewer_id_not?: Maybe<Float>;
  reviewer_id_in?: Maybe<Float[] | Float>;
  reviewer_id_not_in?: Maybe<Float[] | Float>;
  reviewer_id_lt?: Maybe<Float>;
  reviewer_id_lte?: Maybe<Float>;
  reviewer_id_gt?: Maybe<Float>;
  reviewer_id_gte?: Maybe<Float>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  user_type?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  facebook_id?: Maybe<Float>;
  google_id?: Maybe<Float>;
  earnings?: Maybe<Float>;
}

export interface SkillsCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutSkillsInput;
  skill: String;
  description: String;
  years_experience: Float;
  hourly_rate: Float;
  reviews?: Maybe<ReviewCreateManyWithoutSkills_idInput>;
}

export interface SkillsUpsertWithWhereUniqueWithoutUserInput {
  where: SkillsWhereUniqueInput;
  update: SkillsUpdateWithoutUserDataInput;
  create: SkillsCreateWithoutUserInput;
}

export interface ReviewCreateManyWithoutSkills_idInput {
  create?: Maybe<
    ReviewCreateWithoutSkills_idInput[] | ReviewCreateWithoutSkills_idInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface SkillsUpdateManyWithoutUserInput {
  create?: Maybe<SkillsCreateWithoutUserInput[] | SkillsCreateWithoutUserInput>;
  delete?: Maybe<SkillsWhereUniqueInput[] | SkillsWhereUniqueInput>;
  connect?: Maybe<SkillsWhereUniqueInput[] | SkillsWhereUniqueInput>;
  set?: Maybe<SkillsWhereUniqueInput[] | SkillsWhereUniqueInput>;
  disconnect?: Maybe<SkillsWhereUniqueInput[] | SkillsWhereUniqueInput>;
  update?: Maybe<
    | SkillsUpdateWithWhereUniqueWithoutUserInput[]
    | SkillsUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SkillsUpsertWithWhereUniqueWithoutUserInput[]
    | SkillsUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SkillsScalarWhereInput[] | SkillsScalarWhereInput>;
  updateMany?: Maybe<
    | SkillsUpdateManyWithWhereNestedInput[]
    | SkillsUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewCreateWithoutSkills_idInput {
  id?: Maybe<ID_Input>;
  reviewer_name: String;
  reviewer_id: Float;
  rating: Float;
}

export interface SkillsCreateManyWithoutUserInput {
  create?: Maybe<SkillsCreateWithoutUserInput[] | SkillsCreateWithoutUserInput>;
  connect?: Maybe<SkillsWhereUniqueInput[] | SkillsWhereUniqueInput>;
}

export interface SkillsUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutSkillsInput>;
  skill?: Maybe<String>;
  description?: Maybe<String>;
  years_experience?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
  reviews?: Maybe<ReviewUpdateManyWithoutSkills_idInput>;
}

export interface SkillsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  skill?: Maybe<String>;
  skill_not?: Maybe<String>;
  skill_in?: Maybe<String[] | String>;
  skill_not_in?: Maybe<String[] | String>;
  skill_lt?: Maybe<String>;
  skill_lte?: Maybe<String>;
  skill_gt?: Maybe<String>;
  skill_gte?: Maybe<String>;
  skill_contains?: Maybe<String>;
  skill_not_contains?: Maybe<String>;
  skill_starts_with?: Maybe<String>;
  skill_not_starts_with?: Maybe<String>;
  skill_ends_with?: Maybe<String>;
  skill_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  years_experience?: Maybe<Float>;
  years_experience_not?: Maybe<Float>;
  years_experience_in?: Maybe<Float[] | Float>;
  years_experience_not_in?: Maybe<Float[] | Float>;
  years_experience_lt?: Maybe<Float>;
  years_experience_lte?: Maybe<Float>;
  years_experience_gt?: Maybe<Float>;
  years_experience_gte?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
  hourly_rate_not?: Maybe<Float>;
  hourly_rate_in?: Maybe<Float[] | Float>;
  hourly_rate_not_in?: Maybe<Float[] | Float>;
  hourly_rate_lt?: Maybe<Float>;
  hourly_rate_lte?: Maybe<Float>;
  hourly_rate_gt?: Maybe<Float>;
  hourly_rate_gte?: Maybe<Float>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  AND?: Maybe<SkillsWhereInput[] | SkillsWhereInput>;
  OR?: Maybe<SkillsWhereInput[] | SkillsWhereInput>;
  NOT?: Maybe<SkillsWhereInput[] | SkillsWhereInput>;
}

export interface ReviewUpsertWithWhereUniqueWithoutSkills_idInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutSkills_idDataInput;
  create: ReviewCreateWithoutSkills_idInput;
}

export interface ReviewUpdateWithoutSkills_idDataInput {
  reviewer_name?: Maybe<String>;
  reviewer_id?: Maybe<Float>;
  rating?: Maybe<Float>;
}

export interface ReviewUpdateWithWhereUniqueWithoutSkills_idInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutSkills_idDataInput;
}

export interface ReviewUpdateManyWithoutSkills_idInput {
  create?: Maybe<
    ReviewCreateWithoutSkills_idInput[] | ReviewCreateWithoutSkills_idInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutSkills_idInput[]
    | ReviewUpdateWithWhereUniqueWithoutSkills_idInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutSkills_idInput[]
    | ReviewUpsertWithWhereUniqueWithoutSkills_idInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface SkillsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SkillsWhereInput>;
  AND?: Maybe<SkillsSubscriptionWhereInput[] | SkillsSubscriptionWhereInput>;
  OR?: Maybe<SkillsSubscriptionWhereInput[] | SkillsSubscriptionWhereInput>;
  NOT?: Maybe<SkillsSubscriptionWhereInput[] | SkillsSubscriptionWhereInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  user_type?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  facebook_id?: Maybe<Float>;
  google_id?: Maybe<Float>;
  earnings?: Maybe<Float>;
  skills?: Maybe<SkillsUpdateManyWithoutUserInput>;
}

export interface SkillsUpdateWithoutUserDataInput {
  skill?: Maybe<String>;
  description?: Maybe<String>;
  years_experience?: Maybe<Float>;
  hourly_rate?: Maybe<Float>;
  reviews?: Maybe<ReviewUpdateManyWithoutSkills_idInput>;
}

export interface SkillsUpdateManyWithWhereNestedInput {
  where: SkillsScalarWhereInput;
  data: SkillsUpdateManyDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  first_name: String;
  last_name: String;
  user_type: String;
  latitude: Float;
  longitude: Float;
  facebook_id: Float;
  google_id: Float;
  earnings: Float;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  user_type: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  facebook_id: () => Promise<Float>;
  google_id: () => Promise<Float>;
  earnings: () => Promise<Float>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  user_type: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  facebook_id: () => Promise<AsyncIterator<Float>>;
  google_id: () => Promise<AsyncIterator<Float>>;
  earnings: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SkillsSubscriptionPayload {
  mutation: MutationType;
  node: Skills;
  updatedFields: String[];
  previousValues: SkillsPreviousValues;
}

export interface SkillsSubscriptionPayloadPromise
  extends Promise<SkillsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillsPreviousValuesPromise>() => T;
}

export interface SkillsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillsPreviousValuesSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SkillsPreviousValues {
  id: ID_Output;
  skill: String;
  description: String;
  years_experience: Float;
  hourly_rate: Float;
}

export interface SkillsPreviousValuesPromise
  extends Promise<SkillsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  skill: () => Promise<String>;
  description: () => Promise<String>;
  years_experience: () => Promise<Float>;
  hourly_rate: () => Promise<Float>;
}

export interface SkillsPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  skill: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  years_experience: () => Promise<AsyncIterator<Float>>;
  hourly_rate: () => Promise<AsyncIterator<Float>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSkills {
  count: Int;
}

export interface AggregateSkillsPromise
  extends Promise<AggregateSkills>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillsSubscription
  extends Promise<AsyncIterator<AggregateSkills>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface SkillsConnection {
  pageInfo: PageInfo;
  edges: SkillsEdge[];
}

export interface SkillsConnectionPromise
  extends Promise<SkillsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillsEdge>>() => T;
  aggregate: <T = AggregateSkillsPromise>() => T;
}

export interface SkillsConnectionSubscription
  extends Promise<AsyncIterator<SkillsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillsSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  reviewer_name: String;
  reviewer_id: Float;
  rating: Float;
  createdAt: DateTimeOutput;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  reviewer_name: () => Promise<String>;
  reviewer_id: () => Promise<Float>;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  reviewer_name: () => Promise<AsyncIterator<String>>;
  reviewer_id: () => Promise<AsyncIterator<Float>>;
  rating: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface Review {
  id: ID_Output;
  reviewer_name: String;
  reviewer_id: Float;
  rating: Float;
  createdAt: DateTimeOutput;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  skills_id: <T = SkillsPromise>() => T;
  reviewer_name: () => Promise<String>;
  reviewer_id: () => Promise<Float>;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  skills_id: <T = SkillsSubscription>() => T;
  reviewer_name: () => Promise<AsyncIterator<String>>;
  reviewer_id: () => Promise<AsyncIterator<Float>>;
  rating: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  skills_id: <T = SkillsPromise>() => T;
  reviewer_name: () => Promise<String>;
  reviewer_id: () => Promise<Float>;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  first_name: String;
  last_name: String;
  user_type: String;
  latitude: Float;
  longitude: Float;
  facebook_id: Float;
  google_id: Float;
  earnings: Float;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  user_type: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  facebook_id: () => Promise<Float>;
  google_id: () => Promise<Float>;
  earnings: () => Promise<Float>;
  skills: <T = FragmentableArray<Skills>>(args?: {
    where?: SkillsWhereInput;
    orderBy?: SkillsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  user_type: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  facebook_id: () => Promise<AsyncIterator<Float>>;
  google_id: () => Promise<AsyncIterator<Float>>;
  earnings: () => Promise<AsyncIterator<Float>>;
  skills: <T = Promise<AsyncIterator<SkillsSubscription>>>(args?: {
    where?: SkillsWhereInput;
    orderBy?: SkillsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  user_type: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  facebook_id: () => Promise<Float>;
  google_id: () => Promise<Float>;
  earnings: () => Promise<Float>;
  skills: <T = FragmentableArray<Skills>>(args?: {
    where?: SkillsWhereInput;
    orderBy?: SkillsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SkillsEdge {
  node: Skills;
  cursor: String;
}

export interface SkillsEdgePromise extends Promise<SkillsEdge>, Fragmentable {
  node: <T = SkillsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillsEdgeSubscription
  extends Promise<AsyncIterator<SkillsEdge>>,
    Fragmentable {
  node: <T = SkillsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Skills {
  id: ID_Output;
  skill: String;
  description: String;
  years_experience: Float;
  hourly_rate: Float;
}

export interface SkillsPromise extends Promise<Skills>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  skill: () => Promise<String>;
  description: () => Promise<String>;
  years_experience: () => Promise<Float>;
  hourly_rate: () => Promise<Float>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SkillsSubscription
  extends Promise<AsyncIterator<Skills>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  skill: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  years_experience: () => Promise<AsyncIterator<Float>>;
  hourly_rate: () => Promise<AsyncIterator<Float>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SkillsNullablePromise
  extends Promise<Skills | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  skill: () => Promise<String>;
  description: () => Promise<String>;
  years_experience: () => Promise<Float>;
  hourly_rate: () => Promise<Float>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Skills",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
